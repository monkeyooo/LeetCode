package src.main.java;

import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

public class MaxAreaOfIsland {

    public static void main(String[] args) {
        MaxAreaOfIsland maxAreaOfIsland = new MaxAreaOfIsland();
        var ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]{{0,0,1,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,1,0,0,0},{0,1,1,0,1,0,0,0,0,0,0,0,0},{0,1,0,0,1,1,0,0,1,0,1,0,0},{0,1,0,0,1,1,0,0,1,1,1,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,1,1,0,0,0},{0,0,0,0,0,0,0,1,1,0,0,0,0}});
        System.out.println(ans);
        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]{{0,0,0,0,0,0,0,0}});
        System.out.println(ans);
        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]{{1,0,0,0,0,0,0,0}});
        System.out.println(ans);
        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]{
                {0,0,1,0,0,0,0,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,0,0,0},
                {0,1,0,0,1,0,0,0,0,0,0,0,0},
                {0,1,0,0,1,0,0,0,1,0,1,0,0},
                {0,1,0,0,1,1,0,0,1,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,0,0,0,0}
        });
        System.out.println(ans);
        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]{
                {0}
        });
        System.out.println(ans);
        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]{
                {1}
        });
        System.out.println(ans);
        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]
                {
                        {0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0},
                        {0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0},
                        {0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,1,0,0},
                        {0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0}
                }
        );
        System.out.println(ans);

        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]
                {
                        {0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0},
                        {0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0},
                        {0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,1,0,0},
                        {0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0}
                }
        );
        System.out.println(ans);

        ans = maxAreaOfIsland.maxAreaOfIsland(new int[][]
                {
                        {0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0},
                        {0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0},
                        {0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,1,0,0},
                        {0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                }
        );
        System.out.println(ans);
    }

    public int maxAreaOfIsland(int[][] grid) {
        int [] nums =  new int[1];
        int max = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] != 0) {
                    nums[0] = 0;
                    dfs(grid, i, j , nums);
                    if (nums[0] > 4) {
                        max = Math.max(max, nums[0]);
                    }
                }
            }
        }

        return max;
    }

    private void dfs(int[][] grid, int vertical, int horizontal, int[] nums) {
        if (vertical < 0 || horizontal < 0 || vertical > grid.length - 1 || horizontal > grid[0].length - 1 || grid[vertical][horizontal] == 0) {
            return;
        }
        nums[0]++;
        grid[vertical][horizontal] = 0;
        dfs(grid, vertical + 1, horizontal, nums);
        dfs(grid, vertical - 1, horizontal, nums);
        dfs(grid, vertical, horizontal+ 1, nums);
        dfs(grid, vertical, horizontal - 1, nums);
    }
}
